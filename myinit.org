#+STARTUP: overview

* Interface Tweaks

#+BEGIN_SRC emacs-lisp
  ;; Some information about me
  (setq user-full-name "Jean-Guy Nistad")
  (setq user-mail-address "jean-guy.nistad@bsh.de")

  ;; Set the default directory
  (setq default-directory "H:/" )

  ;; No startup message
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; confirm by only pressing 'y' for 'yes'; 'n' for 'no'
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Visual line mode for line wrapping
  (global-visual-line-mode)

  ;; confirm by only pressing 'y' for 'yes'; 'n' for 'no'
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Text and auto-fill modes
  (setq default-major-mode 'text-mode)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)

  ;; Display line and column numbers globally (available starting in emacs > 25)
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Set the default encoding system to UTF-8
  (set-language-environment "UTF-8")

  ;; Convert underscore/hat + curly braces as sub-/superscripts
  (setq org-use-sub-superscripts (quote {}))
  (setq org-export-with-sub-superscripts (quote {}))
  (setq package-selected-packages (quote (org try org-edna htmlize)))

  ;; Custom key bindings
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (global-set-key "\C-x\C-g" 'go-to-line)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)      ;; Make ESC quit prompts

  ;; Default font size for all buffers
  (set-face-attribute 'default nil :height 150)

  ;; Place backup files in a temporary directory
  (setq backup-directory-alist
  `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))

  ;; Insert the euro symbol and make it accessible with M-x euro RET
  (fset 'euro
	(lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([24 56 return 35 120 50 48 65 67 return] 0 "%d")) arg)))
  ;; Ref: https://astrofloyd.wordpress.com/2014/08/11/insert-the-euro-symbol-e-in-emacs/

  ;; Set the ediff program to use the diff version provided by PortableGit
  (setq ediff-diff-program "C:\\Programme\\Git\\usr\\bin\\diff.exe")
#+END_SRC

* Look & Feel

** Current Theme
  
#+BEGIN_SRC emacs-lisp
  ;; Make theme safe to load
  (setq custom-safe-themes
	'("e8830baf7d8757f15d9d02f9f91e0a9c4732f63c3f7f16439cc4fb42a1f2aa06" default))

  (use-package zerodark-theme
    :ensure t
    :init (load-theme 'zerodark))
#+END_SRC

** rainbow-delimiters

#+BEGIN_SRC emacs-lisp
;; Makes matching parenthesis easier
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

* CygWin Integration

#+BEGIN_SRC emacs-lisp
  (if (file-directory-p "c:/cygwin64/bin")
      (add-to-list 'exec-path "c:/cygwin64/bin"))
#+END_SRC

* Bash Shell

This script allows using the bash shell in this Windows emacs version. Simply run: M-x run-bash

Reference: [[https://caiorss.github.io/Emacs-Elisp-Programming/Emacs_On_Windows.html#sec-1-2-2][Emacs on Microsoft Windows]]

#+BEGIN_SRC emacs-lisp
  (defun run-bash ()
	(interactive)
	(let ((shell-file-name "C:\\Programme\\Git\\bin\\bash.exe"))
	      (shell "*bash*")))
#+END_SRC

* Completion

** ivy

#+BEGIN_SRC emacs-lisp
;; Generic completion mechanism for Emac
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+END_SRC

** ivy-rich

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+END_SRC
** counsel

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history)))
#+END_SRC

* Templates

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :init (yas-global-mode 1)
    :config
    (setq yas-snippet-dirs '("h:/.emacs.d/snippets")))
#+END_SRC

* Python

** elpy

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+END_SRC

** jedi

# source: [[https://cestlaz.github.io/posts/using-emacs-12-python/]]

#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))
#+END_SRC

* Help

** which-key

#+BEGIN_SRC emacs-lisp
;; Show details about all possible key bindings
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+END_SRC
